1.Node.js 中有四种基本的流类型：
    - Readable 可读的流 (例如：fs.createReadStream )
    - Writable 可写的流 (例如：fs.createWriteStream)
    - Duplex  可读写的流 (例如： net.Sockey)
    - Transform 转换流 在读写过程中可以修改和变换数据的Duplex 流 (例如：zlib.createDeflate 压缩 )

2.流中的数据有两种模式，二进制模式和对象模式
    - 二进制模式：每个分块都是buffer 或者 string 对象
    - 对象模式 ： 流内部处理的是一系列普通对象
       - 所有使用Node.js API 创建的流对象都只能操作 strings 和 Buffer 对象。但是，通过一些第三方流的实现，依然能够处理其他类型的 JavaScript值
         (除了null，它在流处理中有特殊意义)。这些流被认为是工作在'对象模式'(object mode). 在创建流的实例时，可以通过 objectMode 选项使流的实例
         切换到对象模式。试图将已经存在的流切换到对象模式是不安全的

3.可读流的两种模式
    - 可读流事实上工作在下面的两种模式之一: flowing 和 paused
    - 在flowing 模式下，可读流自动从系统底层读取数据，并通过EventEmitter 接口的事件尽快将数据提供给应用。
    - 在paused 模式下，必须显示调用stream.read() 方法来从流中读取数据片段
    - 所有初始工作模式为paused 的Readable 流，可以通过下面三种途径切换到 flowing 模式:
        - 监听'data' 事件
        - 调用 stream.resume() 方法
        - 调用 stream.pipe()方法将数据发送到 Writable
    - 可读流可以通过下面途径切换到paused 模式
        - 如果不存在管道目标(pipe desination),可以通过调用 stream.pause()方法实现
        - 如果存在管道目标，可以通过取消'data'事件监听，并调用stream.unpipie()方法移除所有管道目标来实现
      如果Readable 切换到flowing 模式，且没有消费者处理流中的数据，这些数据将会丢失。比如，调用了 readable.resume()方法却没有监听'data'事件
      或是取消了'data' 事件监听，就有可能出现这种情况
4.缓存区
    - Writable 和 Readable 流都会将数据存储到内部的缓冲器(buffer)中。这些缓存器可以 通过相应的 writable._writableState.getBuffer() 或 readable._readableState.buffer来获取
    - 缓存器的大小取决于传递给流构造函数的 highWaterMark 选项。对于普通的流，highWaterMark 选项指定了总共的字节数。对于工作在对象模式的流，highWaterMark 指定了对象的总数。
    - 当可读流的实现调用 stream.push(chunk) 方法时，数据被放到缓存器中。如果流的消费者没有调用stream.read() 方法，这些数据会始终存在于内部队列中，直到被消费。
    - 当内部可读缓存器的大小达到highWaterMark 指定的阀值时，流会暂停从底层资源读取数据，直到当前 缓存器的数据被消费(也就是说，流会在内部 停止调用readable._read()来填充可读缓存器)
    - 可写流通过反复调用 writable.write(chunk) 方法将数据放到缓存器。当内部可写缓存器的总大小小于highWaterMark 指定的阀值时，调用writable.write()返回true。一旦内部缓存器的大小达到或超过highWaterMark，调用writable.write()将返回false
    - stream API的关键目标，尤其对于stream.pipe()方法，就是限制缓存器数据大小，一达到可接受的成都。这样，对于读写速度不匹配的源头和目标，就不会超出可用的内存大小
    - Duplex 和Transform 都是可读写的。在内部，他们都维护了两个 相互独立的缓存器用于读和写。在维持了合理高效的数据流的同时，也使得对于读和写可以独立进行而互不影响。
5.可读流的三种状态
    - 在任意时刻，任意可读流应确切处于下面三种状态之一：
        - readable._readableState.flowing = null
        - readable._readableState.flowing = false
        - readable._readableState.flowing = true
        - 若 readable._readableState.flowing 为nul，由于不存在数据消费者，可读流将不会产生数据。在这个状态下，监听'data' 事件，调用readable.pipe()方法，或者调用readable.resume()方法，readable._readableState.flowing 的值将会变为true。这时，随着数据生成，可读流开始频繁触发事件
        - 调用readable.pause() 方法，readable.unpipe()方法，或者接受"背压"（back pressure）,将导致readable._readableState.flowing 值变为false。这将暂停事件流，但 不会暂停数据生成。在这种情况下，为'data'事件设置监听函数不会导致readable._readableState.flowing变为true
        - 当readable._readableState.flowing值为false 时，数据可能堆积到流的内部缓存中
6.readable
    - readable 事件将在流中有数据可供读取时触发。在某些情况下，为 readable 事件添加回调将会导致一些数据被读取到内部缓存中
        - const readable = getReadableStreamSomehow();
          readable.on('readable',()=>{
             //有些数据可读了
          })
          - 当到达流数据尾部时，readable事件也会触发。触发顺序在end 事件之前
          - 事实上，readable 事件表明流有了新的动态：要么是有了新的数据，要么是到了流的尾部。对于前者，sream.read() 将返回可用的数据。而对于后者，stream.read() 将返回null
7.流的经典应用
    7.1 行读取器
      7.1.1 换行和回车
        - 以前的打印要每秒可以打印10个字符，换行要0.2秒，正要可以打印2个字符
        - 研制人员就是在每行后面家两个表示结束的字符。一个叫做'回车'，告诉打字机把打印头定位在左边界；另一个叫做'换行'，告诉打字机把纸向下移一行。
        - Unix 系统里，每行结尾只有换行'(line feed)'，即'\n'
        - Windows 系统里面，每行结尾是'<回车><换行>'，即'\r\n'
        - Mac系统里，每行结尾是'回车'，即'\r'
        - 在ASCII码里
                     十进制  十六进制
            - 换行\n   10     0A
            - 回车\r   13     0D
