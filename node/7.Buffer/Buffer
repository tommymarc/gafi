1.什么是Buffer
  - 缓冲区Buffer 是暂时存放输入输出数据的一段内存
  - JS语言没有二进制数据类型，而在处理TCP和文件流的时候，必须要处理二进制数据
  - NodeJS提供了一个Buffer对象来提供对二进制数据的操作
  - 是一个表示固定内存分配的全局对象，也就是说要放到缓存区中的字节数需要提前确定
  - Buffer好比由一个8位字节元素组成的数组，可以有效的在Javascript中表示二进制数据
2.什么是字节
  - 字节(Byte)是计算机存储时的一种计量单位，一个字节等于8位二进制数
  - 一个位就代表一个0或1，每8个位(bit)组成一个字节(Byte)
  - 字节是通过网络传输信息的单位
  - 一个字节最大值十进制数是255 2**8-1

 进制
   - 0b   2进制
   - 0x   16进制
   - 0b   8进制
   -  将任意进制字符串转换成十进制
      - parseInt('11',2); //3   2进制转成10进制
      - parseInt('77',8); //63  8进制转成10进制
      - parseInt('e7',16);//175 16进制转成10进制

   -  将10进制转换为其他进制字符串
      - (3).toString(2) // '11'   十进制转成2进制
      - (17).toString(16) // '11'  十进制转成16进制
      - (33).toString(32) // '11'  十进制转成32进制

3.定义buffer 的三种方式
  3.1 通过长度定义buffer
  3.2 通过数组定义buffer
  3.3 字符串创建
4.Buffer 常用方法
  4.1 buf.fill(value[,offset[,end]][,encoding])
  4.2 write方法
  4.3 writeInt8
    - Little-Endian & Big-Endian
  4.4 toString 方法
  4.5 slice 方法
    - 截取乱码问题
  4.6 copy 方法
  4.7 concat 方法
  4.8 isBuffer
  4.9 length   获取字节长度（显示是字符串所代表buffer的长度）
5. base64
 - Base64 是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法
 - Base64 要求把没三个8Bit的字节转换为四个6Bit的字节（38=46=24），然后把6Bit再添加两位高位0，组成四个8Bit的字节，
   也就是说，转换后的字符串理乱上将要比原来的长1/3


