1.JS模块方面的不足
  - js没有模块系统，不支持封闭的作用域和以来管理
  - 没有标准库，没有文件系统和io流API
  - 也没有包管理系统
2.Commonjs规范
  - 封装功能
  - 封装作用域
  - 可能解决依赖问题
  - 工作效率更高，重构方便
3. Node中的CommonJS
  - 在node.js里，模块划分所有功能，每个js都是一个模块
  - 实现require方法 NPM实现了模块的自动加载和安装依赖
4.模块分类
  4.1 原生模块
    http  path  fs  util  events  编译成二进制 加载速度最快，原来模块通过名称来加载
  4.2 文件模块
   - 在硬盘的某个位置，加载速度非常慢，文件模块通过名称或路径来加载 文件模块的后缀有三种
     - 后缀名为 .js的JavaScript 脚本文件，需要先读入内存再运行
     - 后缀名为 .json的JSON文件 fs 读入内存 转化为JSON对象 (JSON.parse)
     - 后缀名为 .node的经过编译后的二进制C/C++扩展模块文件，可以直接使用
        - 一般自己写的通过路径来加载别人写的通过名称去当前目录或全局的node_modules 下面去找
  4.3 第三方模块
   - 如果require函数只指定名称则视为从node_modules下面加载文件，这样的话你可以移动模块而不需要修改引用的模块路径
   - 第三方模块的查询路径包括module.paths 和全局目录
  4.3.1 全局目录
   - window如果在环境变量中设置了 NODE_PATH变量，并将变量设置为一个有效的磁盘目录，require在本地找不到此模块时向在此目录下找这个模块
     UNIX操作系统中会从$HOME/.node_modules $HOME/node——libraries目录下寻找
5.从模块外部访问模块内的成员
  - 使用exports 对象
  - 使用module_exports 导出引用类型
6.模块对象的属性
  - module.id
  - module.filename
  - module.loaded
  - module.parent
  - module.children
  - module.paths
7.包
  - 在Node.js中，可以通过包来对一组具有相互依赖关系的模块进行统一管理，通过包可以把某个独立功能封装起来，每个项目的根目录下面，一般都有
    一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息(比如名称、版本、许可证等元数据)，
    npm install  命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境
8.npm
  - npm 可管理全局安装包
  - 修改全局安装目录
    - npm config set prefix "d:\node.js\node_global"
  - 全局安装 可在任意目录下面执行命令行
    - npm install babel-cli -g
  - 本地安装 在要安装的目录下执行命令行
    - npm install babel-cli -save
9.yarn
  - Yarn 是一个依赖管理工具。它能够管理你的代码，并与全世界的开发者分享代码，代码是通过包(有时也被称为模块)进行共享的。
    在每一个包中包含了所有需要共享的代码，另外还定义了一个 package.json文件，用来描述这个包
  9.1 初始化一个新项目
    yarn init
  9.2 添加一个依赖包
    yarn add [package]
    yarn add [package]@[version]
    yarn add [package]@[tag]
  9.3 更新一个依赖包
    yarn upgrade [package]
    yarn upgrade [package]@[version]
    yarn upgrade [package]@[tag]
  9.4 删除一个依赖包
    yarn remove [package]
    yarn remove [package]@[version]
    yarn remove [package]@[tag]
  9.5 安装所有的依赖包
    yarn  或者 yarn install