1.Node能够解决什么问题
- Node的首要目标是提供一种简单的，用于创建高性能服务器的开发工具
- Web服务器的瓶颈在于并发量的用户量，对于Java和Php的实现方式

2.Node是什么？
- Node.js是一个基于 Chrome V8 引擎的JavaScript运行环境，让JavaScript的执行效率与低端的C语言的相近的执行效率
- Node.js使用了一个事件驱动、非阻塞式I/O的模型，使其轻量又高效。
- Node.js的包管理器npm, 是全球最大的开源库生态系统。

3.Node特点
3.1 为什么JavaScript 是单线程？
 - 这是由Javascript这门脚本语言的用途决定的
 - Web Worker 并没有改变JavaScript单线程的本质。
 - - Web Worker多线程
   - 1.完全受主线程控制（只是处理部分线程任务，并不是完整的线程）
   - 2.不能操作DOM
3.2 浏览器模型
 - 用户界面(User Interface)-包括地址栏、前进/后退按钮、书签菜单等
 - 浏览器引擎(Browser engine) 在用户界面和呈现引擎之间传送指令
 - 呈现引擎(Rendering engine) 又称渲染引擎，也被称为浏览器内核，在线程方面又称为UI线程
 - 网络(Networking) 用于网络调用，比如HTTP请求
 - 用户界面后端(UI Backend) 用于绘制基本的窗口小部件，UI线程和JS共用一个线程
 - JavaScript解释器(JavaScript Interpreter) 用于解析和执行JavaScript代码
 - 数据存储(Date Persistence) 这是持久层。浏览器需要在硬盘上保存各种数据
3.3 除js线程和UI线程之外的其他线程
 - 浏览器事件触发线程
 - 定时触发器线程
 - 异步HTTP请求线程
3.4 任务队列
 1.所有同步任务都在主线程上执行，形成一个执行栈
 2.主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件
 3.一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行
 4.主线程不断重复上面的第三步。
3.5 Event Loop(事件循环)
 - 主线程从任务队列中读取事件，这个过程是循环不断的，所有整个的这种运行机制又称为Event Loop(事件循环)
3.6 Node.js的 Event Loop
 1.V8引擎解析JavaScript脚本
 2.解析后的代码，调用Node API
 3.libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎
 4.V8引擎再将结果返回给用户
3.7 同步与异步
 - 同步和异步关注的是消息通知机制
   - 同步就是发出调用后，没有得到结果之前，该调用不返回，一旦调用返回，就得到返回值了。简而言之就是调用者主动等待这个调用的结果
   - 而异步则相反，调用者在发出调用后这个调用就直接返回了，所以没有返回结果，
     换句话说当一个异步过程调用发出后，调用者不会立刻得到结果，而是调用发出后，被调用者通过状态、通知或回调函数处理这个调用
3.8 阻塞与非阻塞
 - 阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态
   - 阻塞调用是指调用结果返回之前，当前线程会被挂起，调用线程只有在得到结果之后才会返回
   - 非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程
3.9 组合
 - 同步异步 取决于 被调用者，来决定是马上给你答案，还是回头再给
 - 阻塞非阻塞 取决于 调用者，在等待答案的过程，调用方是否可以干别的事情
   - 同步阻塞 ：等待的过程中不干别的事情，线程挂起，那就是调用者被阻塞了
   - 异步阻塞 ：等待的过程中不干别的事情，线程挂断，那就是调用者被阻塞了
   - 同步非阻塞 ：等待的过程中去做别的事情，线程挂起，那就是调用者非阻塞
   - 异步非阻塞 ：等待的过程中去做别的事情，线程挂断，那就是调用者非阻塞

4 什么场合下应该考虑使用Node 框架
 - 当应用程序需要处理大量并发的输入输出，而在向客户端响应之前，应用程序并不需要进行非常复杂的处理
   - 聊天服务器
   - 电子商务网站

5.NodeCore
 1. 控制台(console)
 2. 全局作用域(global)
 3. 函数
    - require
    - 模块加载过程
    - require.resolve
    - 模版缓存(require.cache)
    - require.main
    - 模块导出
      module.exports, require, module, filename, dirname
 4.process
    4.1 process 对象
      在node.js里，process 对象代表node.js应用程序，可以获取应用程序的用户，运行环境等各种信息
    4.2 process.nextTick & setImmediate
      - process.nextTick() 方法将 callback 添加到 "next tick 队列"，一旦当前事件轮询队列的任务全部完成，在next tick 队列中的所有callbacks会被依次调用
      - setImmediate 预定立即执行的callback 它是在I O 事件的回调之后被触发
 5.EventEmitter #
  - 在Node.js的用于实现各种事件处理的event 模块中，定义了EventEmitter类，所以可能触发事件的对象都是一个继承自EventEmitter类的子类实例对象
 6.node 断点调试
  - V8提供了一个强大的调试器，可以通过TCP协议从外部访问，Nodejs提供了一个内建调试器来帮助开发者调试应用程序。想要开启调试器 我们需要在代码中加入debugger标签，
    当Nodejs执行debugger 标签时会自动暂停(debugger 标签相当于在代码中开启一个断点)
    命令：
    - c                         继续执行到下一个断点处
    - next,n                    单步执行
    - step,s                    单步进入函数
    - out,o                     退出当前函数
    - setBreakpoint(10),sb(10)  在第10行设置断点
    - repl                      打开求值环境，ctrl_c 退出debug 模式
    - watch(exp)                把表达式添加监视列表
    - watchers                  显示所有表达式的值

    debugger   //nodejs.org/api/debugger.html

